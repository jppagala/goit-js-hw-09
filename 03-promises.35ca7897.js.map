{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SA4CA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EAEFI,EAAQ,CAAEN,SAAUA,EAAUC,MAAOA,IAGrCM,EAAO,CAAEP,SAAUA,EAAUC,MAAOA,G,GAErCA,E,IAnDaQ,SAASC,cAAc,SAE/BC,iBAAiB,UAQ7B,SAAsBC,GACpBA,EAAMC,iBAON,IAJA,IAAMC,EAAaF,EAAMG,OAAOC,SAASf,MAAMgB,MACzCC,EAAcN,EAAMG,OAAOC,SAASG,KAAKF,MACzCG,EAAgBR,EAAMG,OAAOC,SAASK,OAAOJ,MAE1CK,EAAI,EAAGA,GAAKF,EAAeE,IAClCvB,EAAcuB,EAAGC,OAAOT,GAAcS,OAAOL,GAAeI,EAAI,KAAKE,MACnE,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MACXyB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,O,IAGlD,SAAAwB,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MACXyB,EAAA7B,GAAS8B,OAAOG,QACd,sBAAqCD,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,O,IAIjD8B,QAAQC,IACN,mBACEH,OADiBP,EAAE,gBAEpBO,OADCN,OAAOT,GAAcS,OAAOL,GAAeI,EAAI,K","sources":["src/js/03-promises.js"],"sourcesContent":["import NotiFlix from 'notiflix';\n\n// ###############################################################\n// Variable Declarations and Assignments\n// ###############################################################\nconst promiseForm = document.querySelector('.form');\n\npromiseForm.addEventListener('submit', handleSubmit);\n\n//\n//\n// ###############################################################\n// Functions\n// ###############################################################\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  // console.log(`submitted`);\n\n  const firstDelay = event.target.elements.delay.value;\n  const nextPromise = event.target.elements.step.value;\n  const promiseAmount = event.target.elements.amount.value;\n\n  for (let i = 1; i <= promiseAmount; i++) {\n    createPromise(i, Number(firstDelay) + Number(nextPromise * (i - 1))).then(\n      ({ position, delay }) => {\n        NotiFlix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay} ms`\n        );\n      },\n      ({ position, delay }) => {\n        NotiFlix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay} ms`\n        );\n      }\n    );\n    console.log(\n      `created promise ${i} with delay ${\n        Number(firstDelay) + Number(nextPromise * (i - 1))\n      }`\n    );\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // console.log(`${position} resolved`);\n        resolve({ position: position, delay: delay });\n      } else {\n        // console.log(`${position} rejected`);\n        reject({ position: position, delay: delay });\n      }\n    }, delay);\n  });\n}\n\n//\n//\n// ###############################################################\n// Initialization\n// ###############################################################\n"],"names":["$ejkSG","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","firstDelay","target","elements","value","nextPromise","step","promiseAmount","amount","i","Number","then","param","$parcel$interopDefault","Notify","success","concat","failure","console","log"],"version":3,"file":"03-promises.35ca7897.js.map"}